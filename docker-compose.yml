version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sports_postgres
    environment:
      POSTGRES_DB: sports_data
      POSTGRES_USER: sports_user
      POSTGRES_PASSWORD: sports_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sports_database_schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "6543:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sports_user -d sports_data"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sports_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sports_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sports_network

  # Sport Data Pipeline Application
  sports_app:
    build: .
    container_name: sports_data_pipeline
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://sports_user:sports_password@postgres:5432/sports_data
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # API Configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      METRICS_PORT: 9090
      
      # Features
      ENABLE_DATA_COLLECTION: "true"
      ENABLE_ANALYTICS: "true"
      ENABLE_API: "true"
      ENABLE_MONITORING: "true"
      ENABLE_METRICS: "true"
      
      # Scheduling
      ENABLE_SCHEDULED_COLLECTION: "true"
      ENABLE_SCHEDULED_ANALYTICS: "true"
      ENABLE_SYSTEM_MONITORING: "true"
      ENABLE_HEALTH_CHECKS: "true"
      
      # Logging
      LOG_LEVEL: INFO
      LOG_FILE_PATH: /app/logs
      
      # Reports
      REPORT_OUTPUT_PATH: /app/reports
      
      # Run Mode
      RUN_MODE: full_service
      
      # External APIs (set your actual keys)
      FOOTBALL_DATA_API_KEY: ${FOOTBALL_DATA_API_KEY:-your_api_key_here}
      BETFAIR_APP_KEY: ${BETFAIR_APP_KEY:-your_betfair_key_here}
      BETFAIR_USERNAME: ${BETFAIR_USERNAME:-your_username}
      BETFAIR_PASSWORD: ${BETFAIR_PASSWORD:-your_password}
      
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./data:/app/data
    ports:
      - "8000:8000"  # API
      - "9090:9090"  # Metrics
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - sports_network

  

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sports_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - sports_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sports_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - sports_network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: sports_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - sports_app
    restart: unless-stopped
    networks:
      - sports_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  sports_network:
    driver: bridge